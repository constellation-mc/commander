plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'io.freefair.lombok' version '8.6'
    id 'com.github.spotbugs-base' version '6.0.12'
    id 'com.diffplug.spotless' version '6.25.0'
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.spotbugs.snom.SpotBugsTask
import me.modmuss50.mpp.ReleaseType

def local = !System.getenv().containsKey("GITHUB_RUN_NUMBER");

version = "${project.mod_version}-${project.minecraft_version}-${local ? 'local' : "build.${System.getenv("GITHUB_RUN_NUMBER")}"}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

apply from: "https://raw.githubusercontent.com/constellation-mc/artifacts/main/artifacts.groovy"
constellationRepo(project, "dark-matter")

apply from: "gradle/mappings.gradle"

repositories {
    maven { url 'https://jitpack.io' }
}

configurations.register("shade") {
    transitive = false
}

tasks.register('dependenciesJar', ShadowJar) {
    configurations = [project.configurations.shade]
    archiveClassifier = "dependencies"

    exclude("META-INF/**")
}

tasks.register('fullDependenciesJar', ShadowJar) {
    dependsOn(dependenciesJar)
    mustRunAfter(jar)
    archiveClassifier = "full-dependencies"

    from(tasks.jar)
    from(dependenciesJar)

    var pck = "me.melontini.commander.impl.lib."

    mergeServiceFiles()
    relocate("com.ezylang.evalex", pck + "com.ezylang.evalex")
    relocate("net.fabricmc.mappingio", pck + "net.fabricmc.mappingio")
}

remapJar {
    dependsOn(fullDependenciesJar)
    getInputFile().set(fullDependenciesJar.archiveFile.get())
}
tasks.jar.archiveClassifier = "slim"

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    def dmModules = ["base", "mixin", "minecraft", "data"]
    for (final def module in dmModules) {
        modApi include("me.melontini:dark-matter-${module}:${project.dark_matter}")
    }

    implementation shade("com.ezylang:EvalEx:${project.evalex_version}")
    implementation shade("net.fabricmc:mapping-io:${project.mappingio_version}")
}

tasks.register("spotbugs", SpotBugsTask) { task ->
    sourceSets.each {
        task.sourceDirs.from(task.sourceDirs.files, it.allSource.sourceDirectories)
        task.classDirs.from(task.classDirs.files, it.output)
        task.auxClassPaths.from(task.auxClassPaths.files, it.compileClasspath)
    }
    excludeFilter = file("spotbugs.xml")
    ignoreFailures = true
    reports {
        if (local) {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        } else {
            sarif {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.sarif")
            }
        }
    }
}

spotless {
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        formatAnnotations()
    }
}

loom {
    accessWidenerPath = file("src/main/resources/commander.accesswidener")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
    from("LICENSE_mapping-io")
    from("LICENSE_EvalEx")
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    if (!local) {
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/constellation-mc/commander"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)

    changelog = file("CHANGELOG.md").text
    type = ReleaseType.valueOf(providers.environmentVariable("VERSION_TYPE").getOrElse("BETA"))
    modLoaders.add("fabric")

    displayName = "${project.mod_version} (${project.minecraft_version})"

    modrinth {
        projectId = "86bUtxWv"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")

        requires("fabric-api")
        embeds("dark-matter")
    }
    curseforge {
        projectId = "1009687"
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")

        requires("fabric-api")
        embeds("dark-matter")
    }
    github {
        repository = "constellation-mc/commander"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").getOrElse("${project.minecraft_version}-fabric")

        type = STABLE
    }

    dryRun = local
}
