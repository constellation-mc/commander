buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
    }

    dependencies {
        classpath (libs.mapping.io)
        classpath ('com.google.code.gson:gson:2.10.1')
    }
}


import com.google.gson.JsonElement
import com.google.gson.JsonObject
import com.google.gson.JsonParser
import net.fabricmc.mappingio.MappingReader
import net.fabricmc.mappingio.MappingWriter
import net.fabricmc.mappingio.adapter.MappingSourceNsSwitch
import net.fabricmc.mappingio.format.MappingFormat
import net.fabricmc.mappingio.tree.MemoryMappingTree

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.util.zip.DeflaterOutputStream

ext.MANIFEST_URL = new URL("https://launchermeta.mojang.com/mc/game/version_manifest_v2.json")

tasks.register("downloadCommanderMappings") {
    File processed = new File("${project.layout.projectDirectory.getAsFile()}/.gradle/commander/mappings/${project.minecraft_version}.bin")
    if (!processed.exists()) {
        project.logger.lifecycle("Downloading and Processing Mappings...")
        Files.createDirectories(processed.toPath().getParent())

        MemoryMappingTree tree = new MemoryMappingTree()
        MappingReader.read(new InputStreamReader(new URL(getManifest().getAsJsonObject("downloads").getAsJsonObject("server_mappings").get("url").getAsString()).openStream(), StandardCharsets.UTF_8), new MappingSourceNsSwitch(tree, "target", true))
        tree.setSrcNamespace("official")
        tree.setDstNamespaces(List.of("mojang"))

        OutputStream stream = Files.newOutputStream(processed.toPath())
        tree.accept(MappingWriter.create(new OutputStreamWriter(new DeflaterOutputStream(stream), StandardCharsets.UTF_8), MappingFormat.TINY_FILE))
    }
}

processResources {
    mustRunAfter(tasks.downloadCommanderMappings)
    from(new File("${project.layout.projectDirectory.getAsFile()}/.gradle/commander/mappings/${project.minecraft_version}.bin")) {
        rename { "commander/mappings/${project.minecraft_version}.bin" }
    }
}

JsonObject getManifest() {
    var o = downloadObject(ext.MANIFEST_URL)
    for (JsonElement versions : o.getAsJsonArray("versions")) {
        if (project.minecraft_version == versions.getAsJsonObject().get("id").getAsString()) {
            return downloadObject(new URL(versions.getAsJsonObject().get("url").getAsString()))
        }
    }
    throw new IllegalStateException("Unknown version '%s'".formatted(project.minecraft_version))
}

static JsonObject downloadObject(URL url) {
    return JsonParser.parseReader(new InputStreamReader(url.openStream(), StandardCharsets.UTF_8)).getAsJsonObject()
}